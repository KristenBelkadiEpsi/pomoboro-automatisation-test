@page "/"
@using pomodoro.Models
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer


<h1>Pomodoro Timer</h1>

<p>Time Left: @timeLeft.ToString(@"mm\:ss")</p>
<button @onclick="StartTimer">Start</button>
<button @onclick="PauseTimer">Pause</button>
<button @onclick="StopTimer">Stop</button>

<h2>Session History</h2>
@if (sessions.Count > 0)
{
    <ul>
        @foreach (var session in sessions)
        {
            <li>@session.StartTime: @session.Duration (Type: @session.Type)</li>
        }
    </ul>
}

<p>Total Work Time: @totalWorkTime</p>

@code {
    private TimeSpan timeLeft = TimeSpan.FromMinutes(25);
    private List<Session> sessions = new List<Session>();
    private bool isTimerRunning;
    private Timer timer;
    private TimeSpan totalWorkTime;

    private void StartTimer()
    {
        if (!isTimerRunning)
        {
            timer = new Timer(async (_) => { await InvokeAsync(Tick);
                await InvokeAsync(StateHasChanged);
            }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
            sessions.Add(new Session { StartTime = DateTime.Now, Duration = TimeSpan.FromMinutes(25), Type = "Work" });
            isTimerRunning = true;
        }
    }

    private void PauseTimer()
    {
        StopTimer();
        sessions.Last().Duration = DateTime.Now - sessions.Last().StartTime;
        sessions.Add(new Session { StartTime = DateTime.Now, Duration = TimeSpan.FromMinutes(5), Type = "Pause" });
        timeLeft = TimeSpan.FromMinutes(5);
        StartTimer();
    }

    private void StopTimer()
    {
        timer?.Dispose();
        isTimerRunning = false;
        UpdateTotalWorkTime();
    }

    private void Tick()
    {

        if (timeLeft.TotalSeconds > 0)
        {
            timeLeft -= TimeSpan.FromSeconds(1);
        }
        else
        {
            JSRuntime.InvokeVoidAsync("alert", "Session complete!");
            StopTimer();
            timeLeft = TimeSpan.FromMinutes(25); // Reset timer
        }
    }

    private void UpdateTotalWorkTime()
    {
        totalWorkTime = TimeSpan.FromSeconds(sessions.Where(s => s.Type == "Work").Sum(s => (DateTime.Now - s.StartTime).TotalSeconds));
    }

}